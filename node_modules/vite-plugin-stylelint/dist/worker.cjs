'use strict';

const node_worker_threads = require('node:worker_threads');
const debugWrap = require('debug');
const utils = require('./shared/vite-plugin-stylelint.DtpuXS4O.cjs');
require('@rollup/pluginutils');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const debugWrap__default = /*#__PURE__*/_interopDefaultCompat(debugWrap);

const debug = debugWrap__default(`${utils.PLUGIN_NAME}:worker`);
const options = node_worker_threads.workerData.options;
const filter = utils.getFilter(options);
let stylelintInstance;
let formatter;
const initPromise = utils.initializeStylelint(options).then((result) => {
  stylelintInstance = result.stylelintInstance;
  formatter = result.formatter;
  return result;
});
(async () => {
  debug("==== worker start ====");
  debug("Initialize Stylelint");
  const { stylelintInstance: stylelintInstance2, formatter: formatter2 } = await initPromise;
  if (options.lintOnStart) {
    debug("Lint on start");
    utils.lintFiles({
      files: options.include,
      stylelintInstance: stylelintInstance2,
      formatter: formatter2,
      options
    });
  }
})();
node_worker_threads.parentPort?.on("message", async (id) => {
  if (!stylelintInstance) await initPromise;
  debug("==== message event ====");
  debug(`id: ${id}`);
  const shouldIgnore = utils.shouldIgnoreModule(id, filter);
  debug(`should ignore: ${shouldIgnore}`);
  if (shouldIgnore) return;
  const filePath = utils.getFilePath(id);
  debug(`filePath: ${filePath}`);
  utils.lintFiles({
    files: options.lintDirtyOnly ? filePath : options.include,
    stylelintInstance,
    formatter,
    options
  });
});
