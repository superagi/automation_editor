import { dirname, extname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import { Worker } from 'node:worker_threads';
import debugWrap from 'debug';
import { P as PLUGIN_NAME, g as getOptions, a as getFilter, i as initializeStylelint, l as lintFiles, s as shouldIgnoreModule, b as getFilePath } from './shared/vite-plugin-stylelint.BQrEPIRa.mjs';
import '@rollup/pluginutils';

const debug = debugWrap(PLUGIN_NAME);
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const ext = extname(__filename);
function StylelintPlugin(userOptions = {}) {
  const options = getOptions(userOptions);
  let worker;
  const filter = getFilter(options);
  let stylelintInstance;
  let formatter;
  return {
    name: PLUGIN_NAME,
    apply(config, { command }) {
      debug("==== apply hook ====");
      if (config.mode === "test" || process.env.VITEST) return options.test;
      const shouldApply = command === "serve" && options.dev || command === "build" && options.build;
      debug(`should apply this plugin: ${shouldApply}`);
      return shouldApply;
    },
    async buildStart() {
      debug("==== buildStart hook ====");
      if (options.lintInWorker) {
        if (worker) return;
        debug("Initialize worker");
        worker = new Worker(resolve(__dirname, `worker${ext}`), {
          workerData: { options }
        });
        return;
      }
      debug("Initial Stylelint");
      const result = await initializeStylelint(options);
      stylelintInstance = result.stylelintInstance;
      formatter = result.formatter;
      if (options.lintOnStart) {
        debug("Lint on start");
        await lintFiles(
          {
            files: options.include,
            stylelintInstance,
            formatter,
            options
          },
          this
          // use buildStart hook context
        );
      }
    },
    async transform(_, id) {
      debug("==== transform hook ====");
      debug(`id: ${id}`);
      const watchIds = this.getWatchFiles();
      debug(`watchIds: ${watchIds}`);
      const ids = [id, ...watchIds];
      debug(`ids: ${ids}`);
      if (worker) {
        for (const id2 of ids) {
          worker.postMessage(id2);
        }
        return;
      }
      const filteredIds = ids.filter((id2) => !shouldIgnoreModule(id2, filter));
      debug(`filteredIds: ${filteredIds}`);
      const shouldIgnore = filteredIds.length === 0;
      debug(`should ignore: ${shouldIgnore}`);
      if (shouldIgnore) return;
      const filePaths = filteredIds.map((id2) => getFilePath(id2));
      return await lintFiles(
        {
          files: options.lintDirtyOnly ? filePaths : options.include,
          stylelintInstance,
          formatter,
          options
        },
        this
        // use transform hook context
      );
    },
    async buildEnd() {
      debug("==== buildEnd hook ====");
      if (worker) await worker.terminate();
    }
  };
}

export { StylelintPlugin as default };
